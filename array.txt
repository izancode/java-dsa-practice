import java.util.*;

public class array {
    public static void main(String args[]) {
        //creating an array
        int marks[] = new int[50];
        int number[] = { 1, 2, 3 };
        int moreNumber[] = { 4, 5, 6 };
        String fruits[] = { "mongo", "apple", "orange" };

        int marks[] = new int[100];

        Scanner sc = new Scanner(System.in);
        // int pyh;
        // pyh = sc.nextInt();
        System.out.println("length of array: " + marks.length);

        marks[0] = sc.nextInt(); // phy
        marks[1] = sc.nextInt(); // chem
        marks[2] = sc.nextInt(); // maths

        System.out.println("phy: " + marks[0]);
        System.out.println("chem: " + marks[1]);
        System.out.println("maths: " + marks[2]);
        marks[2] = 40;
        System.out.println("maths: " + marks[2]);
        marks[2] = marks[2] + 1;
        System.out.println("maths: " + marks[2]);

        int percentage = ((marks[0] + marks[1] + marks[2]) / 3);
        System.out.println("percentage: " + percentage + "%");

        //input/output
        //creating an array




    }

}







//Passing arrays as argument
import java.util.*;

public class array {

    public static void update(int marks[], int nonChangable) {
        nonChangable = 50;
        for (int i = 0; i < marks.length; i++) {
            marks[i] = marks[i] + 1;

        }

    }

    public static void main(String args[]) {
        int marks[] = { 97, 98, 99 };

        for (int i = 0; i < marks.length; i++) {
            System.out.print("old: " + marks[i] + " ");

        }
        System.out.println();
        int nonChangable = 5;
        System.out.println("nonChangable: before> " + nonChangable);
        update(marks, nonChangable);
        System.out.println("nonChangable: after> " + nonChangable);
        for (int i = 0; i < marks.length; i++) {
            System.out.print("new: " + marks[i] + " ");

        }
    }

}





//linearSearch

import java.util.*;

public class array {

    public static int linearSearch(int numbers[], int key) {
        for (int i = 0; i < numbers.length; i++) {
            if (numbers[i] == key) {
                return i;
            }

        }
        return -1;

    }

    public static void main(String args[]) {
        int numbers[] = { 2, 4, 6, 8, 10, 12, 14, 16 };

        int key = 33;

        int index = linearSearch(numbers, key);

        if (index == -1) {
            System.out.println("Not Found");

        } else {

            System.out.println("Key is at index: " + index);
        }

    }

}



/linearSearch homework practice

import java.util.*;

public class array {

    public static int linearSearch(String menu[], String key) {
        for (int i = 0; i < menu.length; i++) {
            if (menu[i] == key) {
                return i;
            }

        }
        return -1;

    }

    public static void main(String args[]) {
        String menu[] = { "sand-which", "big-col", "samosa", "pizza" };

        String key = "samosa";

        int index = linearSearch(menu, key);

        if (index == -1) {
            System.out.println("Not Found");

        } else {

            System.out.println("Key is at index: " + index);
        }

    }

}




//Largest & smallest Numer in array

import java.util.*;

public class array {

    public static int getLargestNumber(int numbers[]) {
        int largest = Integer.MIN_VALUE;
        int smallest = Integer.MAX_VALUE;
        for (int i = 0; i < numbers.length; i++) {
            if (largest < numbers[i]) {
                largest = numbers[i];

            }
            if (smallest > numbers[i]) {
                smallest = numbers[i];

            }
        }
        System.out.println("smallest number is " + smallest);

        return largest;
    }

    public static void main(String args[]) {
        int numbers[] = { 1, 2, 6, 3, 55 };
        System.out.println("largest number is " + getLargestNumber(numbers));

    }

}




//binary search 
import java.util.*;

public class array {

    public static int binarySearch(int numbers[], int key) {
        int start = 0;
        int end = numbers.length - 1;
        while (start <= end) {
            // find mid
            int mid = (start + end) / 2;
            System.out.println(mid);
            if (numbers[mid] == key) {
                return mid;
            }
            if (numbers[mid] < key) {// right side
                start = mid + 1;

            }
            if (numbers[mid] > key) {// left side
                end = mid - 1;
            }

        }
        return -1;

    }

    public static void main(String args[]) {
        int numbers[] = { 2, 4, 6, 8, 10, 12, 14 };
        int key = 25;

        System.out.println("binarySearch: " + binarySearch(numbers, key));

    }

}



reverse array
import java.util.*;

public class array {

    public static void reverse(int numbers[]) {
        int first = 0;
        int last = numbers.length - 1;

        while (first < last) {
            int temp = numbers[last];
            numbers[last] = numbers[first];
            numbers[first] = temp;
            first++;
            last--;

        }

    }

    public static void main(String args[]) {
        int numbers[] = { 2, 4, 6, 8, 10, 12, 14 };

        reverse(numbers);
        for (int i = 0; i < numbers.length; i++) {

            System.out.print(numbers[i] + " ");
        }
        System.out.println();

    }

}



//pairs in array
import java.util.*;

public class array {

    public static void printPairs(int numbers[]) {
        int tp = 0;
        for (int i = 0; i < numbers.length; i++) {
            int curr = numbers[i];
            for (int j = i + 1; j < numbers.length; j++) {
                System.out.print("(" + curr + "," + numbers[j] + ") ");
                tp++;
            }
            System.out.println();
        }
        System.out.println("total pairs     " + tp);

    }

    public static void main(String args[]) {
        int numbers[] = { 2, 4, 6, 8, 10 };
        printPairs(numbers);

    }

}



//print subarray
import java.util.*;

public class array {

    public static void printSubArrays(int numbers[]) {
        // System.out.println(numbers.length);
        int totalPair = 0;
        for (int start = 0; start < numbers.length; start++) {
            for (int end = start; end < numbers.length; end++) {

                int storeSum = 0;
                for (int koya = start; koya <= end; koya++) {
                    System.out.print(numbers[koya] + " ");
                    storeSum = storeSum + numbers[koya];
                }
                System.out.print(" = storeSum " + storeSum);

                System.out.println();

            }
            System.out.println();

        }

    }

    public static void main(String args[]) {
        int numbers[] = { 2, 4, 6, 8, 10 };
        printSubArrays(numbers);

    }

}





=========================================================================

temprary
import java.util.*;

public class array {
    public static void subArraySumBruteForce(int numbers[]) {
        int totalSum = 0;
        int maxSum = Integer.MIN_VALUE;// -2147483648
        for (int start = 0 /* 0, */; start < numbers.length/* 0 < 5 true */; start++) {
            for (int end = start/* 0 | 1 | 2 | 3 ,4 */; end < numbers.length
            /*
             * 0 < 5 true | 1 < 5 true | 2 < 5 true | 3 < 5 true | 4 < 5 true
             */; end++) {
                totalSum = 0;// 0
                for (int k = start
                /* 0,1 | 0 , 1 ,2 | 0,1,2,3 | 0,1,2,3, 4 | 0 */; k <= end
                /*
                 * 0 <= 0 true, 1<=0 false |
                 * 0<=1 true, 1<=1 true , 2 <= 1 false |
                 * 0<= 2 true,1<=2 true,2<=2 true 3<=2 false |
                 * 0 <= 3 true, 1 <= 3 true, 2<=3 true, 3<=3 true, 4<=3 false |
                 * 0 <= 4 true
                 * 
                 */
                ; k++) {
                    totalSum += numbers[k];
                    /*
                     * totalSum + numbers[0]
                     * 0 + 1 = 1
                     * ||||||||||||||||||||||
                     * totalSum + numbers[0]
                     * 0 + 1 = 1
                     * totalSum + numbers[1]
                     * 1 + -2 = -1
                     * ||||||||||||||||||||||
                     * * totalSum + numbers[0]
                     * 0 + 1 = 1
                     * totalSum + numbers[1]
                     * 1 + -2 = -1
                     * totalSum + numbers[2]
                     * -1 + 6 = 5
                     * ||||||||||||||||||||||
                     * totalSum + numbers[0]
                     * 0+1=1
                     * totalSum + numbers[1]
                     * 1+-2=-1
                     * totalSum + numbers[2]
                     * -1+6=5
                     * totalSum + numbers[3]
                     * 5+-1=4
                     * ||||||||||||||||||||||
                     * totalSum + numbers[0]
                     * 0+1=1
                     */
                }
                System.out.println(totalSum);// 1 | -1 | 5 | 4
                if (maxSum < totalSum) { // -2147483648 < 1 true | 1 < -1 false | 1 < 5 true | 5 < 4 false
                    maxSum = totalSum;
                    // maxSum = 1 | 5
                }
            }
        }
        System.out.println("maxSum " + maxSum);
    }

    public static void main(String args[]) {
        int numbers[] = { 1, -2, 6, -1, 3 };
        subArraySumBruteForce(numbers);
    }
}
import java.util.*;

public class array {
    public static void subArraySum(int numbers[]) {

        int maxSum = Integer.MIN_VALUE;

        System.out.println(maxSum);
        for (int start = 0; start < numbers.length; start++) {
            System.out.println("start " + start);

            for (int end = start; end < numbers.length; end++) {
                int totalSum = 0;
                System.out.println("end " + end);
                for (int k = start; k <= end; k++) {
                    System.out.println(totalSum + "+" + numbers[k]);
                    totalSum += numbers[k];
                }
                System.out.print(totalSum);
                System.out.println();
                if (maxSum < totalSum) {
                    maxSum = totalSum;
                }
                System.out.println("maxSum " + maxSum);
            }
        }

        System.out.println("maxSum " + maxSum);
    }

    public static void main(String args[]) {
        int numbers[] = { 1, -2, 6, -1, 3 };
        subArraySum(numbers);
    }
}
======================================================================================