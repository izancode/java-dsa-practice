public class pattern {

    public static void hollow_reactange(int total_rows, int total_cols) {
        // outer rows
        for (int row = 1; row <= total_rows; row++) {
            // inner - colums
            for (int col = 1; col <= total_cols; col++) {
                // cell - (i,j)
                if (row == 1 || row == total_rows || col == 1 || col == total_cols) {
                    // boundary cells
                    System.out.print("*");
                } else {
                    System.out.print(" ");
                }
            }
            System.out.println();
        }
    }

  public static void inverted_rotated_half_pramid(int total_rows) {
        for (int row = 1; row <= total_rows; row++) {
            // space
            for (int space = 1; space <= total_rows - row; space++) {
                System.out.print(" ");
            }
            // star
            for (int star = 1; star <= row; star++) {
                System.out.print("*");
            }
            // Next Line
            System.out.println();
        }
    }


    



         public static void inverted_half_pyramid_with_numbers(int total_rows) {
        for (int row = 1; row <= total_rows; row++) {
            for (int number = 1; number <= (total_rows - row) + 1; number++) {
                System.out.print(number);

            }
            System.out.println();
        }

    }

   public static void floyd_triangle(int total_rows) {
        int counter = 1;
        for (int row = 1; row <= total_rows; row++) {
            for (int col = 1; col <= row; col++) {
                System.out.print(counter + " ");
                counter++;
            }
            System.out.println();
        }

    }

    public static void zero_one_triangle(int total_rows) {
        for (int row = 1; row <= total_rows; row++) {
            for (int col = 1; col <= row; col++) {
                int evenNumber = (col + row) % 2;
                if (evenNumber == 0) {
                    System.out.print("1");
                } else {
                    System.out.print("0");
                }
            }
            System.out.println();
        }
    }
 public static void butterFly(int total_rows) {
        // 1st half
        for (int row = 1; row <= total_rows; row++) {
            // star
            for (int star = 1; star <= row; star++) {
                System.out.print("*");
            }
            // space
            for (int space = 1; space <= 2 * ((total_rows - row)); space++) {
                System.out.print(" ");
            }
            // star
            for (int star = 1; star <= row; star++) {
                System.out.print("*");
            }
            System.out.println();
        }
        // 2nd half
        for (int row = total_rows; row >= 1; row--) {
            // star
            for (int star = 1; star <= row; star++) {
                System.out.print("*");
            }
            // space
            for (int space = 1; space <= 2 * ((total_rows - row)); space++) {
                System.out.print(" ");
            }
            // star
            for (int star = 1; star <= row; star++) {
                System.out.print("*");
            }
            System.out.println();
        }
 }



    public static void solid_Rhombus(int total_rows) {
        for (int row = 1; row <= total_rows; row++) {
            // space
            for (int space = 1; space <= total_rows - row; space++) {
                System.out.print(" ");
            }
            // star
            for (int star = 1; star <= total_rows; star++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }

    public static void hollow_rhombus(int n) {
        for (int row = 1; row <= n; row++) {
            // space
            for (int space = 1; space <= n - row; space++) {
                System.out.print(" ");
            }
            // star
            for (int star = 1; star <= n; star++) {
                if (row == 1 || row == n || star == 1 || star == n) {
                    System.out.print("*");

                } else {
                    System.out.print(" ");

                }
            }

            System.out.println();

        }

    }

    public static void daimond(int n) {
        for (int row = 1; row <= n; row++) {
            for (int space = 1; space <= n - row; space++) {
                System.out.print(" ");
            }
            for (int star = 1; star <= (2 * row) - 1; star++) {
                System.out.print("*");

            }

            System.out.println();
        }
        for (int row = n; row >= 1; row--) {
            for (int space = 1; space <= n - row; space++) {
                System.out.print(" ");
            }
            for (int star = 1; star <= (2 * row) - 1; star++) {
                System.out.print("*");

            }

            System.out.println();
        }

    }

    public static void main(String args[]) {
        hollow_reactange(4, 5);
            inverted_rotated_half_pramid(4);
          inverted_half_pyramid_with_numbers(5);
               floyd_triangle(5);

        zero_one_triangle(5);
          butterFly(15);
        solid_Rhombus(5);
        hollow_rhombus(25);
        daimond(3);
    }
}
